# app/main.py
import asyncio
import logging
import os
import re
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.common.db import init_models, AsyncSessionLocal
from app.common.common import init_admin

# –≤–∞—à–∏ API-—Ä–æ—É—Ç–µ—Ä—ã
from app.users.routers import router as user_router
from app.users.routers import admin_router as admin_chat_router
from app.events.routers import router as event_router
from app.quizes.routers import router as quiz_router

# Telegram —è–¥—Ä–æ
from telegram.core import bot, dp
from telegram import moderation  # + –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ: auth, debug –∏ —Ç.–ø.

app = FastAPI(title="Music Schedule Bot 6")

# API
app.include_router(user_router)
app.include_router(admin_chat_router)
app.include_router(event_router)
app.include_router(quiz_router)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º tg-—Ä–æ—É—Ç–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(moderation.router)
# dp.include_router(auth.router)

bot_task: asyncio.Task | None = None
logger = logging.getLogger("uvicorn.error")
app_state_started = False  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ===
async def verify_bot_identity():
    token = os.getenv("TELEGRAM_BOT_TOKEN", "")
    if not token:
        raise RuntimeError("‚ùå BOT_TOKEN is not set in environment variables")

    # –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    if not re.fullmatch(r"\d{7,12}:[A-Za-z0-9_-]{35,}", token):
        raise RuntimeError("‚ùå BOT_TOKEN format looks invalid")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è id –≤ —Ç–æ–∫–µ–Ω–µ –∏ id –∏–∑ getMe()
    me = await bot.get_me()  # —É–ø–∞–¥—ë—Ç Unauthorized, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–µ–Ω
    token_bot_id = token.split(":")[0]
    if str(me.id) != token_bot_id:
        raise RuntimeError(
            f"‚ùå BOT_TOKEN mismatch: token bot_id={token_bot_id} but getMe.id={me.id}"
        )

    logger.info(f"‚úÖ Bot OK: @{me.username} (id={me.id}), token_tail=...{token[-6:]}")


@app.on_event("startup")
async def startup_event():
    global bot_task, app_state_started
    if app_state_started:
        # —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ/–±–æ—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        return
    app_state_started = True

    # –∂—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ –ª—é–±—ã—Ö —Å–µ—Ç–∞–ø–æ–≤ –±–æ—Ç–∞
    await verify_bot_identity()

    # –ë–î/—Å–∏–¥—ã
    await init_models()
    asyncio.create_task(seed_admins())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ñ–æ–Ω–æ–º
    async def run_bot():
        try:
            me = await bot.get_me()
            logger.info(f"ü§ñ Bot: @{me.username} (id={me.id}) starting‚Ä¶")
            # —Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å 409 –∏ –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
            info = await bot.get_webhook_info()
            logger.info(f"Webhook before delete: url={info.url!r}, pending={info.pending_update_count}")
            await bot.delete_webhook(drop_pending_updates=True)

            used = dp.resolve_used_update_types()
            logger.info(f"ALLOWED_UPDATES = {used}")
            await dp.start_polling(bot, allowed_updates=used)
        except asyncio.CancelledError:
            logger.info("Bot polling cancelled (shutdown).")
            raise
        except Exception as e:
            logger.exception(f"Bot crashed: {e}")

    if not bot_task or bot_task.done():
        bot_task = asyncio.create_task(run_bot())


@app.on_event("shutdown")
async def shutdown_event():
    global bot_task
    if bot_task:
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            pass


async def seed_admins():
    async with AsyncSessionLocal() as session:
        await init_admin(session=session, telegram_id=1046929828, nickname="Birzhanova Adel", first_name="Adel", last_name="Birzhanova")
        await init_admin(session=session, telegram_id=707309709, nickname="Zakharov Aleksei", first_name="Aleksei", last_name="Zakharov")
        await init_admin(session=session, telegram_id=1131290603, nickname="Abdumanap Zhanibek", first_name="Zhanibek", last_name="Abdumanap")
        await init_admin(session=session, telegram_id=1234, nickname="Test Admin", first_name="Test", last_name="Admin")


@app.get("/")
async def root():
    return {"message": "Welcome to My Modular FastAPI Project"}
