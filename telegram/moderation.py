from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from telegram.core import bot
from app.common.db import get_async_session, AsyncSessionLocal
from sqlalchemy import text, select
from sqlalchemy.sql import text as sql_text
from app.users.models import AdminNotification

router = Router()

def moderation_kb(tid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"approve_tg:{tid}")],
        [InlineKeyboardButton(text="üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å",    callback_data=f"reject_tg:{tid}")],
    ])

async def fetch_admin_ids() -> list[int]:
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –º–æ–¥–µ–ª—å AdminChat ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π select(AdminChat.telegram_id)
    async with AsyncSessionLocal() as session:
        res = await session.execute(sql_text("SELECT telegram_id FROM admin_chats"))
        # scalars() –≤–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ telegram_id
        return [int(x) for x in res.scalars().all()]

async def notify_admins_new_user(telegram_id: int, first_name: str, last_name: str, nickname: str):
    admin_ids = await fetch_admin_ids()
    if not admin_ids:
        print("[WARN] No admin chats configured (use /admin-chats).")
        return

    text_msg = (
        "<b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n"
        f"Telegram ID: <code>{telegram_id}</code>\n"
        f"–ò–º—è: {first_name}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
        f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n\n"
        "–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    )
    kb = moderation_kb(telegram_id)

    # –æ—Ç–∫—Ä–æ–µ–º —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∑–∞–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async with AsyncSessionLocal() as session:
        for chat_id in admin_ids:
            try:
                msg = await bot.send_message(chat_id, text_msg, reply_markup=kb)
                # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–∞–±–ª–∏—Ü—É admin_notifications:
                session.add(AdminNotification(
                    user_tid=telegram_id,
                    admin_chat_id=chat_id,
                    message_id=msg.message_id,
                    status="pending",
                ))
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                # —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω / –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥ –∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                print(f"[TG] skip {chat_id}: {e}")
                continue

        try:
            await session.commit()
        except Exception as e:
            await session.rollback()
            raise

@router.callback_query(F.data.startswith("approve_tg:"))
async def on_approve(call: CallbackQuery):
    tid = int(call.data.split(":")[1])
    try:
        await call.answer("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º‚Ä¶")
    except TelegramBadRequest:
        pass

    # 1) idempotent-–∞–ø–¥–µ–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    async for s in get_async_session():
        res = await s.execute(
            text("""
                UPDATE users
                SET is_active = TRUE
                WHERE telegram_id = :tid AND is_active = FALSE
                RETURNING id
            """),
            {"tid": tid},
        )
        first_time = res.first() is not None

        # 2) –ø–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–±–∏—Ä–∞–µ–º –≤—Å–µ message_id
        notifs = (await s.execute(
            select(AdminNotification).where(AdminNotification.user_tid == tid)
        )).scalars().all()

        for n in notifs:
            n.status = "approved"
        await s.commit()

    # 3) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º/—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    text_all = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tid} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
    for n in notifs:
        try:
            # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:
            # await bot.delete_message(n.admin_chat_id, n.message_id)
            # –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:
            await bot.edit_message_text(
                text_all,
                chat_id=n.admin_chat_id,
                message_id=n.message_id,
            )
        except (TelegramBadRequest, TelegramForbiddenError):
            pass

    # 4) –Ω–∞–∂–∞—Ç–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Ü–∏–∫–ª)
    try:
        await call.message.edit_text(text_all)
    except TelegramBadRequest:
        pass

@router.callback_query(F.data.startswith("reject_tg:"))
async def on_reject(call: CallbackQuery):
    tid = int(call.data.split(":")[1])
    try:
        await call.answer("üóë –û—Ç–∫–ª–æ–Ω—è–µ–º‚Ä¶")
    except TelegramBadRequest:
        pass

    async for s in get_async_session():
        # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–õ–ò —Å—Ç–∞–≤–∏–º is_active = FALSE/–∫–∞–∫–æ–π-—Ç–æ —Å—Ç–∞—Ç—É—Å
        await s.execute(text("DELETE FROM users WHERE telegram_id = :tid"), {"tid": tid})

        notifs = (await s.execute(
            select(AdminNotification).where(AdminNotification.user_tid == tid)
        )).scalars().all()
        for n in notifs:
            n.status = "rejected"
        await s.commit()

    text_all = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tid} –æ—Ç–∫–ª–æ–Ω—ë–Ω."
    for n in notifs:
        try:
            await bot.edit_message_text(
                text_all,
                chat_id=n.admin_chat_id,
                message_id=n.message_id,
            )
        except (TelegramBadRequest, TelegramForbiddenError):
            pass
    try:
        await call.message.edit_text(text_all)
    except TelegramBadRequest:
        pass
